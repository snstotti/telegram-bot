const TelegramApi = require('node-telegram-bot-api')

const token = '1925452654:AAFtRbRRnXV8nV9UIE4ulCgcB4MnU7UWXRc'

const bot = new TelegramApi(token, { polling: true })

bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
    { command: '/keyboard', description: '–í—ã–∑–≤–∞—Ç—å –∫–ª–∞–≤–º–∞—Ç—É—Ä—É' },
])

const completedOrders = [
    {
        order: 1,
        address: '–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
        phone: '9998881214',
        comment: '–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–µ–Ω—Ç',
        status: '–í–≤–µ–¥—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
    },
    {
        order: 2,
        address: '–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
        phone: '9998881214',
        comment: '–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–µ–Ω—Ç',
        status: '–í–≤–µ–¥—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
    },
    {
        order: 3,
        address: '–í–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å',
        phone: '9998881214',
        comment: '–í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–º–µ–Ω—Ç',
        status: '–í–≤–µ–¥—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
    },
]

const arrSupport = []

const idAdminPanel = -1001203491315
const fastfoodMenuGrum = -1001512473260

const objbtnTitle = {
    menu: [
        { textBtn: '–ë–∏–≥–ë—É—Ä–≥–µ—Ä –º–µ–Ω—é', callbackData: 'burgerMenu' },
        { textBtn: '–§–∏—Ç–Ω–µ—Å –º–µ–Ω—é', callbackData: 'fitnesMenu' },
        { textBtn: '–ú—è—Å–Ω–æ–µ –º–µ–Ω—é', callbackData: 'meanMenu' },
        { textBtn: '–ù–∞–≥–µ—Ç—Å—ã –º–µ–Ω—é', callbackData: 'nagetsMenu' },
    ],
    pizza: [
        { textBtn: '–ü–∏—Ü—Ü–∞ —Å –≤–µ—Ç—á–∏–Ω–æ–π', callbackData: 'ham' },
        { textBtn: '–ü–∏—Ü—Ü–∞ –º–µ–∫—Å–∏–∫–∞–Ω–∞', callbackData: 'meksikana' },
        { textBtn: '–ü–∏—Ü—Ü–∞ –º–æ—Ü–∞—Ä–µ–ª–∞', callbackData: 'mocarela' },
        { textBtn: '–ü–∏—Ü—Ü–∞ —Å —Å–∞–ª—è–º–∏', callbackData: 'salymi' },
    ],
    burger: [
        { textBtn: '–ë–∏–≥–ë—É—Ä–≥–µ—Ä', callbackData: 'bigBurger' },
        { textBtn: '–ö—Ä–∞–±—Å-–±—É—Ä–≥–µ—Ä', callbackData: 'crabsBurger' },
        { textBtn: '–ß–∏–∑-–±—É—Ä–≥–µ–∫', callbackData: 'cheesBurger' },
        { textBtn: '–ë—É—Ä–≥–µ—Ä', callbackData: 'burger' },
    ],
    drink: [
        { textBtn: '–õ–∏–º–æ–Ω–∞–¥', callbackData: 'lemonade' },
        { textBtn: '–ü–∏–≤–æ', callbackData: 'beer' },
        { textBtn: '–í–æ–¥–∞ —Å –≥–∞–∑–æ–º', callbackData: 'waterGas' },
        { textBtn: '–í–æ–¥–∞ –±–µ–∑ –≥–∞–∑–∞', callbackData: 'water' },
    ],
}

let botMessageId = []

let objOrder = {
    title: '',
    address: '',
    phone: '',
    comment: '',
    pay: ''
}

const start = () => {
    let userName = ''
    let chatId
    const createBtn = (arrData) => {
        const btn = {
            reply_markup: {
                inline_keyboard: arrData.map(el => {
                    return [{ text: el.text, callback_data: el.callback }]
                })
            }
        }
        return btn
    }
    const descriptionOfTheFutureOrder = () => {
        const b = [
            { text: '–î–∞, –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑', callback: 'pay' },
            { text: '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback: 'editData' },
            { text: '–û—Ç–º–µ–Ω–∞', callback: 'Cancel' },
        ]
        const text = `–í–∞—à –∑–∞–∫–∞–∑: \n *–û–ø–∏—Å–∞–Ω–∏–µ* \n –¶–µ–Ω–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π): 350–≥—Ä–Ω \n –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 1 —á–∞—Å \n –í—Å—ë –≤–µ—Ä–Ω–æ?`
        bot.sendMessage(chatId, text, createBtn(b))
    }

    bot.on('message', async (msg, t) => {
        const text = msg.text
        chatId = msg.chat.id

        // console.log(chatId);

        userName = msg.from.username

        const opts = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ú–µ–Ω—éüçî', callback_data: 'menu' },
                    { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìú', callback_data: 'order' }],

                    [{ text: '–ü—Ä–æ–º–æ-–∫–æ–¥üåü', callback_data: 'promo' },
                    { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞üë®‚Äçüíª', callback_data: 'support' }]
                ]
            }
        }

        const btnBack = [{ text: '–ù–∞–∑–∞–¥', callback: 'back' }]
        const btnAddComment = [
            { text: '–î–∞', callback: 'yes' },
            { text: '–ù–µ—Ç', callback: 'no' },
            { text: '–ù–∞–∑–∞–¥', callback: 'back' },
        ]

        if (text === '/start') {
            return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @${userName} ! –Ø @test2107Foodbot —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–µ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –∏ –≤–∫—É—Å–Ω–æ üòã`, opts)
        }
        if (text === '/keyboard') {
            return bot.sendMessage(chatId, 'keyboard', opts)
        }
        if (text.includes('/address')) {
            objOrder.address = text.toLowerCase().replace(/address/g, '')
            return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(+380)\n –ü–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "\tel"', createBtn(btnBack))
        }
        if (text.includes('/phone')) {
            objOrder.phone = text.toLowerCase().replace(/phone/g, '')
            return bot.sendMessage(chatId, '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', createBtn(btnAddComment))
        }
        if (text.includes('/comment')) {
            objOrder.comment = text.toLowerCase().replace(/comment/g, '')
            return descriptionOfTheFutureOrder()
        }
        if (text.toLowerCase().includes('support')) {

            await bot.sendMessage(idAdminPanel, text.toLowerCase().replace(/support/g, ''))
            return bot.sendMessage(chatId, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏')

        }
        return bot.sendMessage(chatId, '–ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

    })
    ////////////////////////////////////////////////////////////////////

    bot.on('callback_query', async el => {

        const chatId = el.message.chat.id
        const callbackData = el.data

        const showOrders = (arr) => {
            arr.map(el => {
                return bot.sendMessage(
                    chatId,
                    `
                    <b>–ó–∞–∫–∞–∑‚Ññ:</b> ${el.order}
                    <b>–ê–¥—Ä–µ—Å:</b> ${el.address}
                    <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${el.phone}
                    <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${el.comment}
                    <b>–°—Ç–∞—Ç—É—Å:</b> ${el.status}
                    `,
                    { parse_mode: 'HTML' })
            })
        }
        const supportResponse = () => {
            bot.sendMessage(chatId,
                `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                (–ü–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É "support")`)
        }
        const promoCode = () => {

            const subscribeBtn = {
                reply_markup: {
                    inline_keyboard: [[{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'subscribe' }]]
                }
            }
            bot.sendMessage(chatId,
                `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã`, subscribeBtn)
        }
        const menuShow = () => {
            const menuBtn = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ú–µ–Ω—é', callback_data: 'menuBtn' }],
                        [{ text: '–ü–∏—Ü—Ü–∞', callback_data: 'pizza' }],
                        [{ text: '–ë—É—Ä–≥–µ—Ä—ã', callback_data: 'burger' }],
                        [{ text: '–ù–∞–ø–∏—Ç–∫–∏', callback_data: 'drink' }],
                    ]
                }
            }
            bot.sendMessage(chatId, `–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω–µ—Ç–µ—Ä–µ—Å—É–µ—Ç?`, menuBtn)

        }
        const backBtn = (message = '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥') => {
            const back = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'BACK', callback_data: 'btnBack' }],
                    ]
                }
            }
            return bot.sendMessage(chatId, message, back).then(prop => botMessageId.push(prop.message_id))
        }
        const subMenuShow = (textBtn, callbackData) => {
            const btn = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: textBtn, callback_data: callbackData }],

                    ]
                }
            }
            let url = './img/burger.jpg'
            bot.sendPhoto(chatId, url, btn).then(prop => botMessageId.push(prop.message_id))
        }
        const messegeOrder = (callback) => {

            const btnAddAddOrder = [
                { text: '–î–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback: 'addAddOrder' },
                { text: '–û–ø–ª–∞—Ç–∏—Ç—å –ó–∞–∫–∞–∑', callback: 'payOrder' },
                { text: '–ù–∞–∑–∞–¥', callback: 'back' },
            ]
            const btnPaymentMethod = [
                { text: '–ö–∞—Ä—Ç–∞', callback: 'card' },
                { text: '–ù–∞–ª–∏—á–Ω—ã–µ', callback: 'cash' },

            ]
            const btnBack = [{ text: '–ù–∞–∑–∞–¥', callback: 'back' }]


            const result = (callback, user) => {
                bot.sendMessage(idAdminPanel, `–ó–∞–∫–∞–∑ ‚Ññ1: \n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}\n –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç \n *–æ–ø–∏—Å–∞–Ω–∏–µ*\n –¶–µ–Ω–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π): 350–≥—Ä–Ω \n –û–ø–ª–∞—á–µ–Ω–æ: ${callback}`)
            }

            switch (callback) {
                case 'addOrder':
                    return bot.sendMessage(chatId, '–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n –ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ —É—â—ë?', createBtn(btnAddAddOrder))
                case 'payOrder':
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ \n –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/address" –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', createBtn(btnBack))
                case 'yes':
                    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π \n –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/comment" –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º', createBtn(btnBack))
                case 'no':
                    return descriptionOfTheFutureOrder()
                case 'pay':
                    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', createBtn(btnPaymentMethod))
                case 'card':
                    objOrder.pay = callback
                    result(callback, userName)

                    return bot.sendMessage(chatId, '–ó–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! \n –∫—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–∏—Ç –∫ –≤–∞–º —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º. \n –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞')
                case 'cash':
                    objOrder.pay = callback
                    result(callback, userName)
                    return bot.sendMessage(chatId, '–ó–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! \n –ö –æ–ø–ª–∞—Ç–µ 350$(—á–∞–µ–≤—ã–µ –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è).\n –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞')

                default:
                    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ messegeOrder')
            }
        }
        const ordersMenu = (arr, callback) => {
            const btnDescription = [{ text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑', callback: 'addOrder' }, { text: '–ù–∞–∑–∞–¥', callback: 'back' }]

            switch (true) {
                case arr.includes(callback):
                    objOrder.title=callback
                    return bot.sendMessage(chatId, `*–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${callback}*\n   –¶–µ–Ω–∞: 300–≥—Ä–Ω`, createBtn(btnDescription))
                default:
                    return messegeOrder(callback)
            }
        }
        const listFood = (arr) => {
            setTimeout(() => backBtn(), 1500)
            arr.map(el => subMenuShow(el.textBtn, el.callbackData))
        }
        const deleteMessage = (idArr) => {
            idArr.map(id => bot.deleteMessage(chatId, id))
        }

        const callbackDataArr = (objData) => {
            let arr = []
            for (let data in objData) {
                objData[data].map(el => arr.push(el.callbackData))
            }
            return arr
        }



        const baseMenu = (callback, dataArr) => {

            switch (callback || true) {
                case 'order':
                    return showOrders(completedOrders)

                case 'menu':
                    return menuShow()

                case 'promo':
                    return promoCode()

                case 'support':
                    return supportResponse()

                case 'subscribe':
                    bot.sendMessage(chatId, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!',)
                    return objOrder.subscribe = true

                case 'menuBtn':
                    return listFood(objbtnTitle.menu)
                case 'pizza':
                    return listFood(objbtnTitle.pizza)
                case 'burger':
                    return listFood(objbtnTitle.burger)
                case 'drink':
                    return listFood(objbtnTitle.drink)
                case 'btnBack':
                    deleteMessage(botMessageId)
                    return botMessageId = []
                default:
                    return ordersMenu(dataArr, callback)
            }
        }


        
console.log(objOrder);
        baseMenu(callbackData, callbackDataArr(objbtnTitle))
        
    })

}

start()